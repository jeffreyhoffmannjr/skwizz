gitpackage main

import (
    "bytes"
    "crypto/ecdsa"
    "crypto/elliptic"
    "crypto/rand"
    "crypto/sha256"
    "encoding/hex"
    "encoding/json"
    "fmt"
    "io/ioutil"
    "log"
    "mime/multipart"
    "net/http"
    "os"
    "os/exec"
    "path/filepath"
    "sort"
    "strings"
    "sync"
    "time"

    "github.com/davidbyttow/govips/v2/vips"
    "github.com/gin-contrib/cors"
    "github.com/gin-gonic/gin"
    "github.com/robfig/cron/v3"
    limiter "github.com/ulule/limiter"
    ginlimiter "github.com/ulule/limiter/drivers/middleware/gin"
    memorystore "github.com/ulule/limiter/drivers/store/memory"
)

// ============================================================================
// TYPES & SORTING
// ============================================================================
type ImageFile struct {
    Path    string
    ModTime time.Time
}

type ByModTime []ImageFile

func (a ByModTime) Len() int           { return len(a) }
func (a ByModTime) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a ByModTime) Less(i, j int) bool { return a[i].ModTime.After(a[j].ModTime) }

// ============================================================================
// ALLOWED EXTENSIONS & MAGIC NUMBERS
// ============================================================================
var (
    allowedExtensions = map[string]bool{
        ".jpg":  true,
        ".jpeg": true,
        ".png":  true,
        ".gif":  true,
        ".webp": true,
        ".heic": true,
        ".heif": true,
    }

    magicNumbers = map[string][]byte{
        "jpeg": {0xFF, 0xD8, 0xFF},
        "png":  {0x89, 0x50, 0x4E, 0x47},
        "gif":  {0x47, 0x49, 0x46, 0x38},
        "webp": {0x52, 0x49, 0x46, 0x46},
    }
)

// govips needs a one-time startup
var vipsOnce sync.Once

// ============================================================================
// PRIVACY & TRANSPARENCY: CRYPTOGRAPHIC LOGS
// ============================================================================
type LogEvent struct {
    Timestamp string `json:"timestamp"`
    Event     string `json:"event"`
    Filename  string `json:"filename,omitempty"`
    Hash      string `json:"hash,omitempty"`
    Signature string `json:"signature,omitempty"`
}

var (
    logEvents     []LogEvent
    logMutex      sync.Mutex
    privateKey    *ecdsa.PrivateKey
    publicKeyData string
)

func init() {
    // Generate ephemeral ECDSA key for signing events
    var err error
    privateKey, err = ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
    if err != nil {
        log.Fatalf("Failed to generate ECDSA key: %v", err)
    }
    pubKey := privateKey.PublicKey
    // Combine X and Y as hex string for public key
    publicKeyData = fmt.Sprintf("%x%x", pubKey.X, pubKey.Y)
}

// signData signs arbitrary data with our ephemeral private key.
func signData(data string) string {
    hash := sha256.Sum256([]byte(data))
    r, s, err := ecdsa.Sign(rand.Reader, privateKey, hash[:])
    if err != nil {
        log.Printf("Failed to sign data: %v", err)
        return ""
    }
    return fmt.Sprintf("%x%x", r, s)
}

// addLog records an event (upload, delete, shred, etc.) into our cryptographically signed logs.
func addLog(event, filename string) {
    logMutex.Lock()
    defer logMutex.Unlock()

    // Hash the filename to avoid plain storage.
    var fileHash string
    if filename != "" {
        shaVal := sha256.Sum256([]byte(filename))
        fileHash = hex.EncodeToString(shaVal[:])
    }

    entry := LogEvent{
        Timestamp: time.Now().Format(time.RFC3339),
        Event:     event,
        Filename:  filename, // optionally store or omit the actual name
        Hash:      fileHash,
    }
    entry.Signature = signData(entry.Timestamp + entry.Event + entry.Hash)

    logEvents = append(logEvents, entry)
    // Keep only the last 50 events for privacy
    if len(logEvents) > 50 {
        logEvents = logEvents[1:]
    }
}

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================
func isAllowedExtension(filename string) bool {
    ext := strings.ToLower(filepath.Ext(filename))
    return allowedExtensions[ext]
}

func isImageFile(file *multipart.FileHeader) (bool, error) {
    src, err := file.Open()
    if err != nil {
        return false, err
    }
    defer src.Close()

    buff := make([]byte, 8)
    _, err = src.Read(buff)
    if err != nil {
        return false, err
    }

    for _, magic := range magicNumbers {
        if bytes.HasPrefix(buff, magic) {
            return true, nil
        }
    }
    return false, nil
}

func validateImageUpload(file *multipart.FileHeader) error {
    // 32 MB limit
    if file.Size > 32*1024*1024 {
        return fmt.Errorf("file too large, maximum size is 32MB")
    }
    if !isAllowedExtension(file.Filename) {
        return fmt.Errorf("invalid file type, only images are allowed (jpg, jpeg, png, gif, webp, heic, heif)")
    }

    isImg, err := isImageFile(file)
    if err != nil {
        return fmt.Errorf("error validating file: %v", err)
    }
    if !isImg {
        return fmt.Errorf("invalid file content, file must be an actual image")
    }
    return nil
}

func generateAnonymousFilename(originalFilename string) string {
    ext := strings.ToLower(filepath.Ext(originalFilename))
    randomBytes := make([]byte, 16)
    rand.Read(randomBytes)

    hasher := sha256.New()
    hasher.Write(randomBytes)
    hasher.Write([]byte(time.Now().String()))
    hashVal := hex.EncodeToString(hasher.Sum(nil))

    return hashVal[:12] + ext
}

// removeMetadata with govips
func removeMetadata(filePath string) error {
    vipsOnce.Do(func() {
        vips.Startup(nil)
    })

    imgRef, err := vips.NewImageFromFile(filePath)
    if err != nil {
        return fmt.Errorf("govips load error: %v", err)
    }
    defer imgRef.Close()

    if err := imgRef.RemoveMetadata(); err != nil {
        return fmt.Errorf("error removing metadata: %v", err)
    }

    tmpFile := filePath + ".tmp"
    exportParams := vips.NewDefaultExportParams()
    exportParams.StripMetadata = true
    exportParams.Quality = 90

    outBytes, _, err := imgRef.Export(exportParams)
    if err != nil {
        return fmt.Errorf("govips export error: %v", err)
    }
    if err := os.WriteFile(tmpFile, outBytes, 0644); err != nil {
        return fmt.Errorf("error writing stripped file: %v", err)
    }
    if err := os.Rename(tmpFile, filePath); err != nil {
        os.Remove(tmpFile)
        return fmt.Errorf("rename temp: %v", err)
    }
    return nil
}

// SecureDelete overwrites the file multiple times, then removes it
func SecureDelete(path string) error {
    fileInfo, err := os.Stat(path)
    if err != nil {
        return err
    }

    file, err := os.OpenFile(path, os.O_WRONLY, 0666)
    if err != nil {
        return err
    }
    defer file.Close()

    for i := 0; i < 3; i++ {
        file.Seek(0, 0)
        randomData := make([]byte, 4096)
        remaining := fileInfo.Size()

        for remaining > 0 {
            chunkSize := remaining
            if chunkSize > 4096 {
                chunkSize = 4096
            }
            _, err := rand.Read(randomData[:chunkSize])
            if err != nil {
                return err
            }
            _, err = file.Write(randomData[:chunkSize])
            if err != nil {
                return err
            }
            remaining -= chunkSize
        }
        file.Sync()
    }
    return os.Remove(path)
}

// CleanupUploads is called daily by the cron job
func CleanupUploads() {
    loc, _ := time.LoadLocation("Local")
    currentTime := time.Now().In(loc)
    log.Printf("Starting daily cleanup at %v (Local Time: %s)",
        currentTime.Format("2006-01-02 15:04:05 MST"),
        loc.String())

    // 1) Securely delete all uploads
    files, err := ioutil.ReadDir("uploads")
    if err != nil {
        log.Printf("Error reading uploads directory: %v", err)
        return
    }

    totalFiles := 0
    deletedFiles := 0
    errorsCount := 0

    for _, f := range files {
        totalFiles++
        filePath := filepath.Join("uploads", f.Name())
        if f.IsDir() {
            continue
        }
        err := SecureDelete(filePath)
        if err != nil {
            log.Printf("Error deleting file %s: %v", filePath, err)
            errorsCount++
        } else {
            deletedFiles++
            // Log the deletion event
            addLog("DELETE", f.Name())
        }
    }

    log.Printf("Cleanup completed: Processed %d files, Successfully deleted %d files, Errors: %d",
        totalFiles, deletedFiles, errorsCount)

    // 2) Shred logs
    shredTargets := []string{
        "/var/log/nginx/access.log",
        "/var/log/nginx/error.log",
        "/var/log/syslog*",
        "/var/log/auth*",
        "/var/log/kern*",
        "/var/log/dmesg*",
    }

    for _, logFile := range shredTargets {
        if _, err := os.Stat(logFile); err == nil {
            log.Printf("Shredding log file: %s", logFile)
            cmd := exec.Command("shred", "-u", logFile)
            if err := cmd.Run(); err != nil {
                log.Printf("Error shredding %s: %v", logFile, err)
            } else {
                log.Printf("Successfully shredded %s", logFile)
                // Mask the file path, but still log the shred event.
                // We'll do a short partial hash:
                pathHash := sha256.Sum256([]byte(logFile))
                masked := "log-" + hex.EncodeToString(pathHash[:])[:12]
                addLog("SHRED", masked)
            }
        } else {
            log.Printf("Skipping shred: %s not present (%v)", logFile, err)
        }
    }

    // 3) Clear systemd journal
    log.Printf("Clearing systemd journal...")
    rotateCmd := exec.Command("journalctl", "--rotate")
    if err := rotateCmd.Run(); err != nil {
        log.Printf("Error rotating journal: %v", err)
    }
    vacuumCmd := exec.Command("journalctl", "--vacuum-time=1s")
    if err := vacuumCmd.Run(); err != nil {
        log.Printf("Error vacuuming journal: %v", err)
    } else {
        log.Printf("Systemd journal has been cleared.")
    }
}

// ============================================================================
// MAIN
// ============================================================================
func main() {
    // Force Gin into release mode
    gin.SetMode(gin.ReleaseMode)

    log.SetFlags(log.Ldate | log.Ltime)
    log.Println("Starting application...")

    cwd, err := os.Getwd()
    if err != nil {
        log.Fatalf("Failed to get working directory: %v", err)
    }

    uploadDir := filepath.Join(cwd, "uploads")
    if err := os.MkdirAll(uploadDir, 0755); err != nil {
        log.Fatalf("Failed to create uploads directory: %v", err)
    }
    staticDir := filepath.Join(cwd, "static")
    if err := os.MkdirAll(staticDir, 0755); err != nil {
        log.Fatalf("Failed to create static directory: %v", err)
    }

    r := gin.New()

    // 1) Recovery
    r.Use(gin.Recovery())

    // 2) Minimal logging
    r.Use(func(c *gin.Context) {
        start := time.Now()
        method := c.Request.Method
        path := c.Request.URL.Path
        c.Next()
        status := c.Writer.Status()
        latency := time.Since(start)
        log.Printf("[GIN] %v | %3d | %13v | %s  %s",
            start.Format("2006/01/02 - 15:04:05"),
            status,
            latency,
            method,
            path,
        )
    })

    // 3) CORS
    r.Use(cors.New(cors.Config{
        AllowOrigins:     []string{"https://skwizz.app", "http://skwizz.app", "https://www.skwizz.app", "http://www.skwizz.app"},
        AllowMethods:     []string{"GET", "POST", "OPTIONS"},
        AllowHeaders:     []string{"Origin", "Content-Type", "Accept"},
        AllowCredentials: false,
    }))

    // 4) Security headers
    r.Use(func(c *gin.Context) {
        c.Header("X-Frame-Options", "SAMEORIGIN")
        c.Header("Referrer-Policy", "no-referrer")
        c.Header("Strict-Transport-Security", "max-age=31536000; includeSubDomains; preload")

        csp := "" +
            "default-src 'self'; " +
            "img-src 'self' data:; " +
            "style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; " +
            "script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; " +
            "connect-src 'self'; " +
            "object-src 'none';"

        c.Header("Content-Security-Policy", csp)
        c.Next()
    })

    // Set up cron job
    loc, err := time.LoadLocation("Local")
    if err != nil {
        log.Printf("Error loading local timezone: %v", err)
        loc = time.UTC
    }
    cronScheduler := cron.New(cron.WithLocation(loc))
    now := time.Now().In(loc)
    nextMidnight := time.Date(now.Year(), now.Month(), now.Day()+1, 0, 0, 0, 0, loc)

    _, err = cronScheduler.AddFunc("0 0 * * *", func() {
        log.Printf("Cron job triggered at: %v (Local Time)", time.Now().In(loc))
        CleanupUploads()
    })
    if err != nil {
        log.Printf("Error setting up cron job: %v", err)
    } else {
        log.Printf("Cron job successfully scheduled for local midnight")
        log.Printf("Current local time: %v", now.Format("2006-01-02 15:04:05 MST"))
        log.Printf("Next cleanup scheduled for: %v", nextMidnight.Format("2006-01-02 15:04:05 MST"))
        log.Printf("Time until next cleanup: %v", time.Until(nextMidnight))
    }
    cronScheduler.Start()
    defer cronScheduler.Stop()

    // Max file size
    r.MaxMultipartMemory = 32 << 20 // 32 MB

    // Rate-limit: 10 requests/min
    rateVal, err := limiter.NewRateFromFormatted("10-M")
    if err != nil {
        log.Fatalf("Error setting rate limit: %v", err)
    }
    store := memorystore.NewStore()
    instance := limiter.New(store, rateVal)
    limitMiddleware := ginlimiter.NewMiddleware(instance, ginlimiter.WithLimitReachedHandler(func(c *gin.Context) {
        c.String(http.StatusTooManyRequests, "Too many uploads. Please wait a bit before trying again.")
        c.Abort()
    }))

    // Serve static
    r.Static("/static", staticDir)

    // Serve uploads
    r.GET("/uploads/*filepath", func(c *gin.Context) {
        c.Header("Cache-Control", "no-cache")
        c.Header("X-Content-Type-Options", "nosniff")
        fs := http.FileServer(http.Dir(uploadDir))
        http.StripPrefix("/uploads", fs).ServeHTTP(c.Writer, c.Request)
    })

    // Next cleanup info
    r.GET("/next-cleanup", func(c *gin.Context) {
        entries := cronScheduler.Entries()
        if len(entries) > 0 {
            nextRun := entries[0].Next
            now := time.Now().In(loc)
            timeUntil := time.Until(nextRun)
            c.JSON(http.StatusOK, gin.H{
                "current_time": now.Format("2006-01-02 15:04:05 MST"),
                "next_cleanup": nextRun.Format("2006-01-02 15:04:05 MST"),
                "time_until":   timeUntil.String(),
                "timezone":     loc.String(),
            })
        } else {
            c.JSON(http.StatusInternalServerError, gin.H{"error": "No scheduled cleanup found"})
        }
    })

    // Upload
    r.POST("/upload", limitMiddleware, func(c *gin.Context) {
        file, err := c.FormFile("file")
        if err != nil {
            log.Printf("Upload failed: %v", err)
            c.String(http.StatusBadRequest, "File upload failed: "+err.Error())
            return
        }

        log.Printf("Received file: %s (Size: %d bytes)", file.Filename, file.Size)
        if file.Size < 1024 {
            log.Printf("File too small: %d bytes", file.Size)
            c.String(http.StatusBadRequest, "File too small to be a valid image")
            return
        }
        if err := validateImageUpload(file); err != nil {
            log.Printf("Validation failed for %s: %v", file.Filename, err)
            c.String(http.StatusBadRequest, "Invalid file: "+err.Error())
            return
        }

        anonFilename := generateAnonymousFilename(file.Filename)
        filePath := filepath.Join(uploadDir, anonFilename)
        log.Printf("File will be saved as: %s", anonFilename)

        if err := c.SaveUploadedFile(file, filePath); err != nil {
            log.Printf("Failed to save file %s: %v", anonFilename, err)
            c.String(http.StatusBadRequest, "File save failed: "+err.Error())
            return
        }

        if fi, err := os.Stat(filePath); err != nil {
            log.Printf("Error verifying saved file: %v", err)
            c.String(http.StatusInternalServerError, "File verification failed")
            return
        } else {
            log.Printf("File saved successfully, size: %d bytes", fi.Size())
            if fi.Size() < 1024 {
                os.Remove(filePath)
                log.Printf("Removed file due to small size: %d bytes", fi.Size())
                c.String(http.StatusBadRequest, "File too small to be a valid image")
                return
            }
        }

        // Remove metadata
        if err := removeMetadata(filePath); err != nil {
            log.Printf("Error removing metadata from %s: %v", anonFilename, err)
        } else {
            log.Printf("Successfully removed metadata from %s", anonFilename)
        }

        if fi, err := os.Stat(filePath); err != nil {
            log.Printf("Final verification failed: %v", err)
            c.String(http.StatusInternalServerError, "File processing failed")
            return
        } else {
            log.Printf("Final file size: %d bytes", fi.Size())
            if fi.Size() < 1024 {
                os.Remove(filePath)
                log.Printf("Removed file due to small size after processing: %d bytes", fi.Size())
                c.String(http.StatusBadRequest, "File processing resulted in invalid image")
                return
            }
        }

        // Log the upload
        addLog("UPLOAD", anonFilename)
        log.Printf("Successfully processed file %s", anonFilename)
        c.String(http.StatusOK, "Image uploaded successfully")
    })

    // Index with SEO data
    r.GET("/", func(c *gin.Context) {
        files, err := ioutil.ReadDir(uploadDir)
        if err != nil {
            log.Printf("Error reading files directory: %v", err)
            c.String(http.StatusInternalServerError, "Error reading files: "+err.Error())
            return
        }

        var imageFiles []ImageFile
        log.Printf("Found %d files in uploads directory", len(files))

        for _, f := range files {
            if !f.IsDir() {
                if f.Size() < 1024 {
                    log.Printf("Removing invalid file %s (size: %d bytes)", f.Name(), f.Size())
                    os.Remove(filepath.Join(uploadDir, f.Name()))
                    continue
                }
                imageFiles = append(imageFiles, ImageFile{
                    Path:    "/uploads/" + f.Name(),
                    ModTime: f.ModTime(),
                })
                log.Printf("Adding valid image: %s (size: %d bytes, uploaded: %v)",
                    f.Name(), f.Size(), f.ModTime())
            }
        }

        sort.Sort(ByModTime(imageFiles))
        var images []string
        for _, img := range imageFiles {
            images = append(images, img.Path)
        }
        log.Printf("Serving %d valid images", len(images))

        // Pass some basic SEO meta data to the template
        c.HTML(http.StatusOK, "index.html", gin.H{
            "Images": images,

            // Basic SEO fields:
            "MetaTitle":       "skwizz – secure, temporary image hosting",
            "MetaDescription": "upload and share images with automatic deletion and privacy-focused features.",
            "MetaKeywords":    "temporary image hosting, privacy, ephemeral upload, secure sharing",
        })
    })

    // Favicon
    r.GET("/favicon.ico", func(c *gin.Context) {
        c.File(filepath.Join(staticDir, "favicon.ico"))
    })

    // Templates
    templatesDir := filepath.Join(cwd, "templates")
    r.LoadHTMLGlob(filepath.Join(templatesDir, "*"))

    // Additional transparency endpoints
    r.GET("/transparency", func(c *gin.Context) {
        logMutex.Lock()
        defer logMutex.Unlock()
        logsData, _ := json.MarshalIndent(logEvents, "", "  ")
        c.Data(http.StatusOK, "application/json", logsData)
    })

    r.GET("/public-key", func(c *gin.Context) {
        c.String(http.StatusOK, publicKeyData)
    })

    r.GET("/build-info", func(c *gin.Context) {
        buildInfo := map[string]string{
            // Replace "dev" with real commit/time if you do a build with -ldflags
            "commit":     "dev",
            "build_time": time.Now().Format(time.RFC3339),
            "source":     "https://github.com/YOUR_GITHUB/skwizz",
        }
        c.JSON(http.StatusOK, buildInfo)
    })

    // Start server on 127.0.0.1:8080 so Nginx can proxy
    r.Run("127.0.0.1:8080")
}
