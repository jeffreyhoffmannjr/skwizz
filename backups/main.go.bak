package main

import (
	"bytes"
	"crypto/rand"
	"fmt"
	"io/ioutil"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/robfig/cron/v3"
)

// Define allowed image types and their magic numbers
var (
        allowedExtensions = map[string]bool{
                ".jpg":  true,
                ".jpeg": true,
                ".png":  true,
                ".gif":  true,
                ".webp": true,
                ".heic": true,
                ".heif": true,
        }

        // Magic numbers (file signatures) for different image formats
        magicNumbers = map[string][]byte{
                "jpeg": {0xFF, 0xD8, 0xFF},
                "png":  {0x89, 0x50, 0x4E, 0x47},
                "gif":  {0x47, 0x49, 0x46, 0x38},
                "webp": {0x52, 0x49, 0x46, 0x46},
                "heic": {0x00, 0x00, 0x00, 0x18, 0x66, 0x74, 0x79, 0x70},
                "heif": {0x00, 0x00, 0x00, 0x18, 0x66, 0x74, 0x79, 0x70},
        }
)
// isAllowedExtension checks if the file extension is in our allowed list
func isAllowedExtension(filename string) bool {
	ext := strings.ToLower(filepath.Ext(filename))
	return allowedExtensions[ext]
}

// isImageFile checks the file signature to confirm it's actually an image
func isImageFile(file *multipart.FileHeader) (bool, error) {
        // Open the file
        src, err := file.Open()
        if err != nil {
                return false, err
        }
        defer src.Close()

        // Read the first 12 bytes to check file signature (HEIC needs more bytes)
        buff := make([]byte, 12)
        _, err = src.Read(buff)
        if err != nil {
                return false, err
        }

        // Check for standard image formats first
        for format, magic := range magicNumbers {
                if format != "heic" && format != "heif" && bytes.HasPrefix(buff, magic) {
                        return true, nil
                }
        }

        // Special check for HEIC/HEIF formats
        if len(buff) >= 8 {
                // HEIC/HEIF files typically start with a specific pattern
                isHeic := bytes.Equal(buff[4:8], []byte{0x66, 0x74, 0x79, 0x70}) // "ftyp" marker
                if isHeic {
                        return true, nil
                }
        }

        return false, nil
}

// validateImageUpload combines all validation checks
func validateImageUpload(file *multipart.FileHeader) error {
        // Size check (32MB limit)
        if file.Size > 32*1024*1024 {
                return fmt.Errorf("file too large, maximum size is 32MB")
        }

        // Extension check with better error message
        if !isAllowedExtension(file.Filename) {
                return fmt.Errorf("invalid file type, only images are allowed (jpg, jpeg, png, gif, webp, heic, heif)")
        }

        // File content check
        isImage, err := isImageFile(file)
        if err != nil {
                return fmt.Errorf("error validating file: %v", err)
        }
        if !isImage {
                return fmt.Errorf("invalid file content, file must be an actual image")
        }

        return nil
}

// SecureDelete overwrites the file with random data before deletion
func SecureDelete(path string) error {
	// Get file info to determine size
	fileInfo, err := os.Stat(path)
	if err != nil {
		return err
	}

	// Open file for writing
	file, err := os.OpenFile(path, os.O_WRONLY, 0666)
	if err != nil {
		return err
	}
	defer file.Close()

	// Perform 3 passes of overwriting
	for i := 0; i < 3; i++ {
		// Return to start of file
		file.Seek(0, 0)

		// Create a buffer of random data
		randomData := make([]byte, 4096) // Use 4KB chunks
		remaining := fileInfo.Size()

		// Overwrite file contents with random data
		for remaining > 0 {
			writeSize := remaining
			if writeSize > 4096 {
				writeSize = 4096
			}

			_, err := rand.Read(randomData[:writeSize])
			if err != nil {
				return err
			}

			_, err = file.Write(randomData[:writeSize])
			if err != nil {
				return err
			}

			remaining -= writeSize
		}

		// Sync to ensure data is written to disk
		file.Sync()
	}

	// Finally delete the file
	return os.Remove(path)
}

// CleanupUploads securely deletes all files in the uploads directory
func CleanupUploads() {
	log.Println("Starting daily cleanup of uploads directory")

	// Read all files in uploads directory
	files, err := ioutil.ReadDir("uploads")
	if err != nil {
		log.Printf("Error reading uploads directory: %v", err)
		return
	}

	// Track cleanup statistics
	totalFiles := 0
	deletedFiles := 0
	errors := 0

	// Process each file
	for _, file := range files {
		totalFiles++
		filePath := filepath.Join("uploads", file.Name())

		// Skip directories
		if file.IsDir() {
			continue
		}

		// Attempt secure deletion
		err := SecureDelete(filePath)
		if err != nil {
			log.Printf("Error deleting file %s: %v", filePath, err)
			errors++
		} else {
			deletedFiles++
		}
	}

	log.Printf("Cleanup completed: Processed %d files, Successfully deleted %d files, Errors: %d",
		totalFiles, deletedFiles, errors)
}

func main() {
	// Configure logging to include timestamp
	log.SetFlags(log.Ldate | log.Ltime)
	log.Println("Starting application...")

	// Create uploads directory if it doesn't exist
	if err := os.MkdirAll("uploads", 0755); err != nil {
		log.Fatalf("Failed to create uploads directory: %v", err)
	}

// Initialize cron scheduler
cronScheduler := cron.New(cron.WithLocation(time.Local))  // Removed WithSeconds()

// Schedule cleanup at midnight with detailed logging
_, err := cronScheduler.AddFunc("0 0 * * *", func() {
    log.Printf("Cron job triggered at: %v", time.Now())
    CleanupUploads()
})
if err != nil {
    log.Printf("Error setting up cron job: %v", err)
} else {
    log.Printf("Cron job successfully scheduled to run at midnight")
    entries := cronScheduler.Entries()
    if len(entries) > 0 {
        log.Printf("Next cleanup scheduled for: %v", entries[0].Next)
    }
}
cronScheduler.Start()
	// Defer stopping the cron scheduler
	defer cronScheduler.Stop()

	r := gin.Default()
        // Set max multipart memory - 32MB should handle most phone photos
        r.MaxMultipartMemory = 32 << 20  // 32 MB
	r.Static("/uploads", "./uploads")
	r.Static("/static", "./static")
	// Add manual trigger endpoint
	r.GET("/trigger-cleanup", func(c *gin.Context) {
		log.Printf("Manual cleanup triggered at: %v", time.Now())
		go CleanupUploads() // Run in goroutine to not block the response
		c.String(http.StatusOK, "Cleanup triggered")
	})

	// Add endpoint to check next scheduled run
	r.GET("/next-cleanup", func(c *gin.Context) {
		entries := cronScheduler.Entries()
		if len(entries) > 0 {
			nextRun := entries[0].Next
			c.JSON(http.StatusOK, gin.H{
				"next_cleanup": nextRun,
				"current_time": time.Now(),
				"time_until":   time.Until(nextRun).String(),
			})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "No scheduled cleanup found"})
		}
	})

	// Update the upload handler with validation
	r.POST("/upload", func(c *gin.Context) {
		file, err := c.FormFile("file")
		if err != nil {
			c.String(http.StatusBadRequest, "File upload failed: "+err.Error())
			return
		}

		// Validate the image file
		if err := validateImageUpload(file); err != nil {
			c.String(http.StatusBadRequest, "Invalid file: "+err.Error())
			return
		}

		filename := filepath.Base(file.Filename) // Sanitize filename
		filePath := filepath.Join("uploads", filename)

		err = c.SaveUploadedFile(file, filePath)
		if err != nil {
			c.String(http.StatusBadRequest, "File save failed: "+err.Error())
			return
		}

		c.String(http.StatusOK, "Image uploaded successfully")
	})
	// Index handler
	r.GET("/", func(c *gin.Context) {
		files, err := ioutil.ReadDir("uploads")
		if err != nil {
			c.String(http.StatusInternalServerError, "Error reading files: "+err.Error())
			return
		}

		var images []string
		for _, file := range files {
			if !file.IsDir() { // Skip directories
				imagePath := "/uploads/" + file.Name()
				images = append(images, imagePath)
			}
		}

		c.HTML(http.StatusOK, "index.html", gin.H{"Images": images})
	})

	// Get favicon
	r.GET("/favicon.ico", func(c *gin.Context) {
    	c.File("static/favicon.ico")
	})

	r.LoadHTMLGlob("templates/*")
	r.Run(":8080")
}
